"use strict";(self.webpackChunkcentrifugal_dev=self.webpackChunkcentrifugal_dev||[]).push([[3039],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),h=i,m=d["".concat(s,".").concat(h)]||d[h]||p[h]||o;return n?a.createElement(m,r(r({ref:t},u),{},{components:n})):a.createElement(m,r({ref:t},u))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var c=2;c<o;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2708:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return h},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return p}});var a=n(3117),i=n(102),o=(n(7294),n(3905)),r=["components"],l={id:"quickstart",sidebar_label:"Quickstart tutorial",title:"Quickstart tutorial \u23f1\ufe0f"},s=void 0,c={unversionedId:"getting-started/quickstart",id:"getting-started/quickstart",title:"Quickstart tutorial \u23f1\ufe0f",description:"Here we will build a very simple browser application with Centrifugo. It works in a way that users connect to Centrifugo over WebSocket, subscribe to a channel, and start receiving all channel publications (messages published to that channel). In our case, we will send a counter value to all channel subscribers to update counter value in all open browser tabs in real-time.",source:"@site/docs/getting-started/quickstart.md",sourceDirName:"getting-started",slug:"/getting-started/quickstart",permalink:"/docs/next/getting-started/quickstart",draft:!1,editUrl:"https://github.com/centrifugal/centrifugal.dev/edit/main/docs/getting-started/quickstart.md",tags:[],version:"current",frontMatter:{id:"quickstart",sidebar_label:"Quickstart tutorial",title:"Quickstart tutorial \u23f1\ufe0f"},sidebar:"Introduction",previous:{title:"Install Centrifugo",permalink:"/docs/next/getting-started/installation"},next:{title:"Main highlights",permalink:"/docs/next/getting-started/highlights"}},u={},p=[{value:"More examples",id:"more-examples",level:3}],d={toc:p};function h(e){var t=e.components,l=(0,i.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},d,l,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Here we will build a very simple browser application with Centrifugo. It works in a way that users connect to Centrifugo over WebSocket, subscribe to a channel, and start receiving all channel publications (messages published to that channel). In our case, we will send a counter value to all channel subscribers to update counter value in all open browser tabs in real-time."),(0,o.kt)("p",null,"First you need to ",(0,o.kt)("a",{parentName:"p",href:"/docs/next/getting-started/installation"},"install Centrifugo"),". Below in this example, we will use a binary file release for simplicity. Once you have Centrifugo available on your machine you can generate minimal required configuration file with the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"./centrifugo genconfig\n")),(0,o.kt)("p",null,"This helper command will generate ",(0,o.kt)("inlineCode",{parentName:"p"},"config.json")," file in the working directory with content like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="config.json"',title:'"config.json"'},'{\n  "token_hmac_secret_key": "bbe7d157-a253-4094-9759-06a8236543f9",\n  "admin_password": "d0683813-0916-4c49-979f-0e08a686b727",\n  "admin_secret": "4e9eafcf-0120-4ddd-b668-8dc40072c78e",\n  "api_key": "d7627bb6-2292-4911-82e1-615c0ed3eebb",\n  "allowed_origins": []\n}\n')),(0,o.kt)("p",null,"Now we can start a server. Let's start it with a built-in admin web interface:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"./centrifugo --config=config.json --admin\n")),(0,o.kt)("p",null,"We could also enable the admin web interface by not using ",(0,o.kt)("inlineCode",{parentName:"p"},"--admin")," flag but by adding ",(0,o.kt)("inlineCode",{parentName:"p"},'"admin": true')," option to the JSON configuration file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="config.json"',title:'"config.json"'},'{\n  "token_hmac_secret_key": "bbe7d157-a253-4094-9759-06a8236543f9",\n  "admin": true,\n  "admin_password": "d0683813-0916-4c49-979f-0e08a686b727",\n  "admin_secret": "4e9eafcf-0120-4ddd-b668-8dc40072c78e",\n  "api_key": "d7627bb6-2292-4911-82e1-615c0ed3eebb",\n  "allowed_origins": []\n}\n')),(0,o.kt)("p",null,"And then running Centrifugo only with a path to a configuration file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"./centrifugo --config=config.json\n")),(0,o.kt)("p",null,"Now open ",(0,o.kt)("a",{parentName:"p",href:"http://localhost:8000"},"http://localhost:8000"),". You should see Centrifugo admin web panel. Enter ",(0,o.kt)("inlineCode",{parentName:"p"},"admin_password")," value from the configuration file to log in (in this case it's ",(0,o.kt)("inlineCode",{parentName:"p"},"d0683813-0916-4c49-979f-0e08a686b727"),", but will have a different value)."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Admin web panel",src:n(9260).Z,width:"2896",height:"1448"})),(0,o.kt)("p",null,"Inside the admin panel, you should see that one Centrifugo node is running, and it does not have connected clients:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Admin web panel",src:n(8815).Z,width:"2466",height:"600"})),(0,o.kt)("p",null,"Now let's create ",(0,o.kt)("inlineCode",{parentName:"p"},"index.html")," file with our simple app:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="index.html"',title:'"index.html"'},"<html>\n\n<head>\n  <title>Centrifugo quick start</title>\n</head>\n\n<body>\n  <div id=\"counter\">-</div>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/centrifuge/3.0.0/centrifuge.js\"><\/script>\n  <script type=\"text/javascript\">\n    const container = document.getElementById('counter');\n\n    const centrifuge = new Centrifuge(\"ws://localhost:8000/connection/websocket\", {\n      token: \"<TOKEN>\"\n    });\n\n    centrifuge.on('connecting', function (ctx) {\n      console.log(`connecting: ${ctx.code}, ${ctx.reason}`);\n    }).on('connected', function (ctx) {\n      console.log(`connected over ${ctx.transport}`);\n    }).on('disconnected', function (ctx) {\n      console.log(`disconnected: ${ctx.code}, ${ctx.reason}`);\n    }).connect();\n\n    const sub = centrifuge.newSubscription(\"channel\");\n    sub.on('publication', function (ctx) {\n      container.innerHTML = ctx.data.value;\n      document.title = ctx.data.value;\n    }).on('subscribing', function (ctx) {\n      console.log(`subscribing: ${ctx.code}, ${ctx.reason}`);\n    }).on('subscribed', function (ctx) {\n      console.log('subscribed', ctx);\n    }).on('unsubscribed', function (ctx) {\n      console.log(`unsubscribed: ${ctx.code}, ${ctx.reason}`);\n    }).subscribe();\n  <\/script>\n</body>\n\n</html>\n")),(0,o.kt)("p",null,"Note that we are using ",(0,o.kt)("inlineCode",{parentName:"p"},"centrifuge-js")," 3.0.0 in this example, you better use its latest version at the moment of reading this tutorial."),(0,o.kt)("p",null,"In ",(0,o.kt)("inlineCode",{parentName:"p"},"index.html")," above we created an instance of a client (called ",(0,o.kt)("inlineCode",{parentName:"p"},"Centrifuge"),") passing Centrifugo default WebSocket endpoint address to it, then we subscribed to a channel called ",(0,o.kt)("inlineCode",{parentName:"p"},"channel")," and provided a callback function to process incoming real-time messages (publications). Then we called ",(0,o.kt)("inlineCode",{parentName:"p"},".subscribe()")," to initialte subscription and then ",(0,o.kt)("inlineCode",{parentName:"p"},".connect()")," method of client to start a WebSocket connection. "),(0,o.kt)("p",null,"Now you need to serve this file with an HTTP server. In a real-world Javascript application, you will serve your HTML files with a web server of your choice \u2013 but for this simple example we can use a simple built-in Centrifugo static file server:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"./centrifugo serve --port 3000\n")),(0,o.kt)("p",null,"Alternatively, if you have Python 3 installed:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"python3 -m http.server 3000\n")),(0,o.kt)("p",null,"These commands start a simple static file web server that serves the current directory on port 3000. Make sure you still have Centrifugo server running. Open ",(0,o.kt)("a",{parentName:"p",href:"http://localhost:3000/"},"http://localhost:3000/"),"."),(0,o.kt)("p",null,"Now if you look at browser developer tools or in Centrifugo logs you will notice that a connection can not be successfully established:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"2021-09-01 10:17:33 [INF] request Origin is not authorized due to empty allowed_origins origin=http://localhost:3000\n")),(0,o.kt)("p",null,"That's because we have not set ",(0,o.kt)("inlineCode",{parentName:"p"},"allowed_origins")," in the configuration. Modify ",(0,o.kt)("inlineCode",{parentName:"p"},"allowed_origins")," like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="config.json"',title:'"config.json"'},'{\n  ...\n  "allowed_origins": [\n    "http://localhost:3000"\n  ]\n}\n')),(0,o.kt)("p",null,"Allowed origins is a security option for request originating from web browsers \u2013 see ",(0,o.kt)("a",{parentName:"p",href:"/docs/next/server/configuration#allowed_origins"},"more details")," in server configuration docs. ",(0,o.kt)("strong",{parentName:"p"},"Restart Centrifugo")," after modifying ",(0,o.kt)("inlineCode",{parentName:"p"},"allowed_origins")," in a configuration file."),(0,o.kt)("p",null,"Now if you reload a browser window with an application you should see new information logs in server output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'2022-06-10 09:44:21 [INF] invalid connection token error="invalid token: token format is not valid" client=a65a8463-6a36-421d-814a-0083c8836529\n2022-06-10 09:44:21 [INF] disconnect after handling command client=a65a8463-6a36-421d-814a-0083c8836529 command="id:1  connect:{token:\\"<TOKEN>\\"  name:\\"js\\"}" reason="invalid token" user=\n')),(0,o.kt)("p",null,"We still can not connect. That's because the client should provide a valid JWT (JSON Web Token) to authenticate itself. This token ",(0,o.kt)("strong",{parentName:"p"},"must be generated on your backend")," and passed to a client-side (over template variables or using separate AJAX call \u2013 whatever way you prefer). Since in our simple example we don't have an application backend we can quickly generate an example token for a user using ",(0,o.kt)("inlineCode",{parentName:"p"},"centrifugo")," sub-command ",(0,o.kt)("inlineCode",{parentName:"p"},"gentoken"),". Like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"./centrifugo gentoken -u 123722\n")),(0,o.kt)("p",null,"\u2013 where ",(0,o.kt)("inlineCode",{parentName:"p"},"-u")," flag sets user ID. The output should be like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'HMAC SHA-256 JWT for user "123722" with expiration TTL 168h0m0s:\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM3MjIiLCJleHAiOjE2NTU0NDgyOTl9.mUU9s5kj3yqp-SAEqloGy8QBgsLg0llA7lKUNwtHRnw\n')),(0,o.kt)("p",null,"\u2013 you will have another token value since this one is based on randomly generated ",(0,o.kt)("inlineCode",{parentName:"p"},"token_hmac_secret_key")," from the configuration file we created at the beginning of this tutorial. See ",(0,o.kt)("a",{parentName:"p",href:"/docs/next/server/authentication"},"authentication docs")," for information about proper token generation in real app."),(0,o.kt)("p",null,"Now we can copy generated HMAC SHA-256 JWT and paste it into Centrifugo constructor instead of ",(0,o.kt)("inlineCode",{parentName:"p"},"<TOKEN>")," placeholder in ",(0,o.kt)("inlineCode",{parentName:"p"},"index.html")," file. I.e.:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'const centrifuge = new Centrifuge("ws://localhost:8000/connection/websocket", {\n    token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM3MjIiLCJleHAiOjE2NTU0NDgyOTl9.mUU9s5kj3yqp-SAEqloGy8QBgsLg0llA7lKUNwtHRnw"\n});\n')),(0,o.kt)("p",null,"If you reload your browser tab \u2013 the connection will be successfully established, but the client still can not subscribe to a channel:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'2022-06-10 09:45:49 [INF] client command error error="permission denied" client=88116489-350f-447f-9ff3-ab61c9341efe code=103 command="id:2  subscribe:{channel:\\"channel\\"}" reply="id:2  error:{code:103  message:\\"permission denied\\"}" user=123722\n')),(0,o.kt)("p",null,"We need to give client a permission to subscribe on channel ",(0,o.kt)("inlineCode",{parentName:"p"},"channel"),". Let's do this by issuing subscription token for user using one more command-line helper ",(0,o.kt)("inlineCode",{parentName:"p"},"gensubtoken"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"./centrifugo gensubtoken -u 123722 -s channel\n")),(0,o.kt)("p",null,"You should see an output like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'HMAC SHA-256 JWT for user "123722" and channel "channel" with expiration TTL 168h0m0s:\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM3MjIiLCJleHAiOjE2NTU0NDg0MzgsImNoYW5uZWwiOiJjaGFubmVsIn0.JyRI3ovNV-abV8VxCmZCD556o2F2mNL1UoU58gNR-uI\n')),(0,o.kt)("p",null,"Now add the initial subscription token to the example above:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'const sub = centrifuge.newSubscription("channel", {\n  token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM3MjIiLCJleHAiOjE2NTU0NDg0MzgsImNoYW5uZWwiOiJjaGFubmVsIn0.JyRI3ovNV-abV8VxCmZCD556o2F2mNL1UoU58gNR-uI"\n});\n')),(0,o.kt)("p",null,"And that's it, now everything should work."),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Alternatively, we could avoid using subscription token at all and allow all authenticated users to subscribe on channels by just adding ",(0,o.kt)("inlineCode",{parentName:"p"},"allow_subscribe_for_client")," option into configuration:"),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="config.json"',title:'"config.json"'},'{\n  "token_hmac_secret_key": "bbe7d157-a253-4094-9759-06a8236543f9",\n  "admin": true,\n  "admin_password": "d0683813-0916-4c49-979f-0e08a686b727",\n  "admin_secret": "4e9eafcf-0120-4ddd-b668-8dc40072c78e",\n  "api_key": "d7627bb6-2292-4911-82e1-615c0ed3eebb",\n  "allowed_origins": [\n    "http://localhost:3000"\n  ],\n  "allow_subscribe_for_client": true\n}\n')),(0,o.kt)("p",{parentName:"div"},"This makes Centrifugo less strict in channel permission checks as all clients with valid tokens will be able to subscribe on all channels. Depending on a permission logic in your application you should decide which way is reasonable for your specific use case. There are also other ways to authorize subscriptions not mentioned here but described later in the documentation."))),(0,o.kt)("p",null,"Open developer tools and look at WebSocket frames panel, you should see sth like this:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Connected",src:n(3419).Z,width:"2590",height:"1110"})),(0,o.kt)("p",null,"Note, that in this example we generated both connection and subscription JWT \u2013 but they have expiration time, so after some time Centrifugo stops accepting those tokens. In real-life you need to add a token refresh function to a client to rotate tokens. See out ",(0,o.kt)("a",{parentName:"p",href:"/docs/next/transports/client_api"},"client API SDK spec"),"."),(0,o.kt)("p",null,"Also note, that token auth is not the only way to connect to Centrifugo or to subscribe on a channel. There are other ways described throughout documentation."),(0,o.kt)("p",null,"OK, the last thing we need to do here is to publish a new counter value to a channel and make sure our app works properly."),(0,o.kt)("p",null,"We can do this over Centrifugo API sending an HTTP request to default API endpoint ",(0,o.kt)("inlineCode",{parentName:"p"},"http://localhost:8000/api"),", but let's do this over the admin web panel first."),(0,o.kt)("p",null,"Open Centrifugo admin web panel in another browser tab (",(0,o.kt)("a",{parentName:"p",href:"http://localhost:8000/"},"http://localhost:8000/"),") and go to ",(0,o.kt)("inlineCode",{parentName:"p"},"Actions")," section. Select publish action, insert channel name that you want to publish to \u2013 in our case this is a string ",(0,o.kt)("inlineCode",{parentName:"p"},"channel")," and insert into ",(0,o.kt)("inlineCode",{parentName:"p"},"data")," area JSON like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "value": 1\n}\n')),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Admin publish",src:n(1326).Z,width:"2256",height:"1146"})),(0,o.kt)("p",null,"Click ",(0,o.kt)("inlineCode",{parentName:"p"},"Submit")," button and check out the application browser tab \u2013 counter value must be immediately received and displayed."),(0,o.kt)("p",null,"Open several browser tabs with our app and make sure all tabs receive a message as soon as you publish it."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Message received",src:n(2861).Z,width:"2478",height:"1306"})),(0,o.kt)("p",null,"BTW, let's also look at how you can publish data to channel over Centrifugo API from a terminal using ",(0,o.kt)("inlineCode",{parentName:"p"},"curl")," tool:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'curl --header "Content-Type: application/json" \\\n  --header "Authorization: apikey d7627bb6-2292-4911-82e1-615c0ed3eebb" \\\n  --request POST \\\n  --data \'{"method": "publish", "params": {"channel": "channel", "data": {"value": 2}}}\' \\\n  http://localhost:8000/api\n')),(0,o.kt)("p",null,"\u2013 where for ",(0,o.kt)("inlineCode",{parentName:"p"},"Authorization")," header we set ",(0,o.kt)("inlineCode",{parentName:"p"},"api_key")," value from Centrifugo config file generated above."),(0,o.kt)("p",null,"We did it! We built the simplest browser real-time app with Centrifugo and its Javascript client. It does not have a backend, it's not very useful, to be honest, but it should give you an insight on how to start working with Centrifugo server. Read more about Centrifugo server in the next documentations chapters \u2013 it can do much much more than we just showed here. ",(0,o.kt)("a",{parentName:"p",href:"/docs/next/getting-started/integration"},"Integration guide")," describes a process of idiomatic Centrifugo integration with your application backend."),(0,o.kt)("h3",{id:"more-examples"},"More examples"),(0,o.kt)("p",null,"Several more examples are located on Github \u2013 ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/centrifugal/examples"},"check out this repo"),"."),(0,o.kt)("p",null,"Also, check out ",(0,o.kt)("a",{parentName:"p",href:"/blog"},"our blog")," with several tutorials."))}h.isMDXComponent=!0},9260:function(e,t,n){t.Z=n.p+"assets/images/quick_start_admin-3a12aa4705d288a373385439769dca64.png"},8815:function(e,t,n){t.Z=n.p+"assets/images/quick_start_logged_in-5b586ef8284ec251d6cceb550a71a7d8.png"},2861:function(e,t,n){t.Z=n.p+"assets/images/quick_start_message-367c9f516d7cc6803a1075be28469bf8.png"},1326:function(e,t,n){t.Z=n.p+"assets/images/quick_start_publish-1533c714ac1f760e270a5e1851f2ebb9.png"},3419:function(e,t,n){t.Z=n.p+"assets/images/quick_start_ws_frames-20273e9a41bb4dfd7fd16df26713e57d.png"}}]);