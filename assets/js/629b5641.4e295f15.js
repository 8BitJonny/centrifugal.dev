"use strict";(self.webpackChunkcentrifugal_dev=self.webpackChunkcentrifugal_dev||[]).push([[509],{3905:function(t,e,n){n.d(e,{Zo:function(){return d},kt:function(){return m}});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},l=Object.keys(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var p=a.createContext({}),s=function(t){var e=a.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},d=function(t){var e=s(t.components);return a.createElement(p.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},c=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,l=t.originalType,p=t.parentName,d=i(t,["components","mdxType","originalType","parentName"]),c=s(n),m=r,k=c["".concat(p,".").concat(m)]||c[m]||u[m]||l;return n?a.createElement(k,o(o({ref:e},d),{},{components:n})):a.createElement(k,o({ref:e},d))}));function m(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=n.length,o=new Array(l);o[0]=c;var i={};for(var p in e)hasOwnProperty.call(e,p)&&(i[p]=e[p]);i.originalType=t,i.mdxType="string"==typeof t?t:r,o[1]=i;for(var s=2;s<l;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},657:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return i},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return d},default:function(){return c}});var a=n(2122),r=n(9756),l=(n(7294),n(3905)),o=["components"],i={id:"proxy",title:"Proxy to backend"},p=void 0,s={unversionedId:"server/proxy",id:"server/proxy",isDocsHomePage:!1,title:"Proxy to backend",description:"It's possible to proxy some client connection events from Centrifugo to application backend and react to them in a custom way. For example, it's possible to authenticate connection via request from Centrifugo to application backend, refresh client sessions and answer to RPC calls sent by a client over bidirectional connection.",source:"@site/docs/server/proxy.md",sourceDirName:"server",slug:"/server/proxy",permalink:"/docs/server/proxy",editUrl:"https://github.com/centrifugal/centrifugal.dev/edit/main/docs/server/proxy.md",version:"current",frontMatter:{id:"proxy",title:"Proxy to backend"},sidebar:"Guides",previous:{title:"Engines, scalability",permalink:"/docs/server/engines"},next:{title:"History and recovery",permalink:"/docs/server/history_and_recovery"}},d=[{value:"Proxy overview",id:"proxy-overview",children:[]},{value:"HTTP proxy",id:"http-proxy",children:[{value:"HTTP request structure",id:"http-request-structure",children:[]},{value:"Proxy HTTP headers",id:"proxy-http-headers",children:[]},{value:"Connect proxy",id:"connect-proxy",children:[]},{value:"Refresh proxy",id:"refresh-proxy",children:[]},{value:"RPC proxy",id:"rpc-proxy",children:[]},{value:"Subscribe proxy",id:"subscribe-proxy",children:[]},{value:"Publish proxy",id:"publish-proxy",children:[]},{value:"Return custom error",id:"return-custom-error",children:[]},{value:"Return custom disconnect",id:"return-custom-disconnect",children:[]}]},{value:"GRPC proxy",id:"grpc-proxy",children:[]},{value:"Header proxy rules",id:"header-proxy-rules",children:[]}],u={toc:d};function c(t){var e=t.components,n=(0,r.Z)(t,o);return(0,l.kt)("wrapper",(0,a.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"It's possible to proxy some client connection events from Centrifugo to application backend and react to them in a custom way. For example, it's possible to authenticate connection via request from Centrifugo to application backend, refresh client sessions and answer to RPC calls sent by a client over bidirectional connection."),(0,l.kt)("h2",{id:"proxy-overview"},"Proxy overview"),(0,l.kt)("p",null,"The list of events which can be proxied:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Connect \u2013 called when client connects to Centrifugo, so it's possible to authenticate user, return custom data to a client, attach meta information to connection and so on"),(0,l.kt)("li",{parentName:"ul"},"Refresh - called when client session is going to expire, so it's possible to prolong it or just let it expire"),(0,l.kt)("li",{parentName:"ul"},"Subscribe - called when clients tries to subscribe on a channel, so it's possible to check permissions and return custom initial subscription data"),(0,l.kt)("li",{parentName:"ul"},"Publish - called when client tries to publish into a channel, so it's possible to check permissions and optionally modify publication data"),(0,l.kt)("li",{parentName:"ul"},"RPC - called when client sends RPC, you can do whatever logic you need based on a client-provided RPC method and params")),(0,l.kt)("p",null,"At the moment Centrifugo can proxy these events over two protocols:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"HTTP"),(0,l.kt)("li",{parentName:"ul"},"GRPC")),(0,l.kt)("h2",{id:"http-proxy"},"HTTP proxy"),(0,l.kt)("p",null,"HTTP proxy in Centrifugo converts client connection events into HTTP call to application backend."),(0,l.kt)("h3",{id:"http-request-structure"},"HTTP request structure"),(0,l.kt)("p",null,"All proxy calls are ",(0,l.kt)("strong",{parentName:"p"},"HTTP POST")," requests that will be sent from Centrifugo to configured endpoints with a configured timeout. These requests will have some headers copied from original client request (see details below) and include JSON body which varies depending on call type (for example data sent by client in RPC call etc, see more details about JSON bodies below)."),(0,l.kt)("h3",{id:"proxy-http-headers"},"Proxy HTTP headers"),(0,l.kt)("p",null,"The good thing of Centrifugo HTTP proxy is that it transparently proxies original HTTP request headers in request to app backend. But it's required to provide an explicit list of HTTP headers you want to be proxied, for example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="config.json"',title:'"config.json"'},'{\n    ...\n    "proxy_http_headers": [\n        "Origin",\n        "User-Agent",\n        "Cookie",\n        "Authorization",\n        "X-Real-Ip",\n        "X-Forwarded-For",\n        "X-Request-Id"\n    ]\n}\n')),(0,l.kt)("p",null,"Alternatively you can set list of headers via environment variable (space separated):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'export CENTRIFUGO_PROXY_HTTP_HEADERS="Cookie User-Agent X-B3-TraceId X-B3-SpanId" ./centrifugo\n')),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Centrifugo forces ",(0,l.kt)("inlineCode",{parentName:"p"},"Content-Type")," header to be ",(0,l.kt)("inlineCode",{parentName:"p"},"application/json")," in all HTTP proxy requests since it sends body in JSON format to application backend."))),(0,l.kt)("h3",{id:"connect-proxy"},"Connect proxy"),(0,l.kt)("p",null,"With the following options in configuration file:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  ...\n  "proxy_connect_endpoint": "http://localhost:3000/centrifugo/connect",\n  "proxy_connect_timeout":  "1s"\n}\n')),(0,l.kt)("p",null,"\u2013 connection requests ",(0,l.kt)("strong",{parentName:"p"},"without JWT set")," will be proxied to ",(0,l.kt)("inlineCode",{parentName:"p"},"proxy_connect_endpoint")," URL endpoint. On your backend side you can authenticate incoming connection and return client credentials to Centrifugo in response to proxied request."),(0,l.kt)("div",{className:"admonition admonition-danger alert alert--danger"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"danger")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Make sure you properly configured ",(0,l.kt)("a",{parentName:"p",href:"/docs/server/configuration#allowed_origins"},"allowed_origins")," Centrifugo option or check request origin on your backend side upon receiving connect request from Centrifugo. Otherwise your site can be vulnerable to CSRF attack if you are using WebSocket transport for client connections."))),(0,l.kt)("p",null,"Yes, this means you don't need to generate JWT and pass it to a client-side and can rely on cookie while authenticating user. ",(0,l.kt)("strong",{parentName:"p"},"Centrifugo should work on same domain in this case so your site cookie could be passed to Centrifugo by browsers"),". This also means that ",(0,l.kt)("strong",{parentName:"p"},"every")," new connection from a user will result in HTTP POST request to your application backend. While with JWT token you usually generate it once on application page reload, if client reconnects due to Centrifugo restart or internet connection loss it uses the same JWT it had before thus usually no additional requests generated during reconnect process (until JWT expired)."),(0,l.kt)("p",null,"Payload example that will be sent to app backend when client without token wants to establish connection with Centrifugo and ",(0,l.kt)("inlineCode",{parentName:"p"},"proxy_connect_endpoint")," is set to non-empty URL string:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "client":"9336a229-2400-4ebc-8c50-0a643d22e8a0",\n  "transport":"websocket",\n  "protocol": "json",\n  "encoding":"json"\n}\n')),(0,l.kt)("p",null,"Response expected:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{"result": {"user": "56"}}\n')),(0,l.kt)("p",null,"This response allows connecting and tells Centrifugo the ID of a user. See below full list of supported fields in result."),(0,l.kt)("h4",{id:"connect-request-fields"},"Connect request fields"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Optional"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"client"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"no"),(0,l.kt)("td",{parentName:"tr",align:null},"unique client ID generated by Centrifugo for each incoming connection")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"transport"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"no"),(0,l.kt)("td",{parentName:"tr",align:null},"transport name (ex. ",(0,l.kt)("inlineCode",{parentName:"td"},"websocket")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"sockjs"),")")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"protocol"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"no"),(0,l.kt)("td",{parentName:"tr",align:null},"protocol type used by client (",(0,l.kt)("inlineCode",{parentName:"td"},"json")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"protobuf")," at moment)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"encoding"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"no"),(0,l.kt)("td",{parentName:"tr",align:null},"protocol encoding type used (",(0,l.kt)("inlineCode",{parentName:"td"},"json")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"binary")," at moment)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"name"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"yes"),(0,l.kt)("td",{parentName:"tr",align:null},"optional name of client (this field will only be set if provided by a client on connect)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"version"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"yes"),(0,l.kt)("td",{parentName:"tr",align:null},"optional version of client (this field will only be set if provided by a client on connect)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"data"),(0,l.kt)("td",{parentName:"tr",align:null},"JSON object"),(0,l.kt)("td",{parentName:"tr",align:null},"yes"),(0,l.kt)("td",{parentName:"tr",align:null},"optional data from client (this field will only be set if provided by a client on connect)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"b64data"),(0,l.kt)("td",{parentName:"tr",align:null},"JSON object"),(0,l.kt)("td",{parentName:"tr",align:null},"yes"),(0,l.kt)("td",{parentName:"tr",align:null},"optional data from client in base64 format (if binary proxy mode is used)")))),(0,l.kt)("h4",{id:"connect-result-fields"},"Connect result fields"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Optional"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"user"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"no"),(0,l.kt)("td",{parentName:"tr",align:null},"user ID (calculated on app backend based on request cookie header for example). Return it as empty string for accepting unauthenticated request")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"expire_at"),(0,l.kt)("td",{parentName:"tr",align:null},"integer"),(0,l.kt)("td",{parentName:"tr",align:null},"yes"),(0,l.kt)("td",{parentName:"tr",align:null},"a timestamp when connection must be considered expired. If not set or set to ",(0,l.kt)("inlineCode",{parentName:"td"},"0")," connection won't expire at all")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"info"),(0,l.kt)("td",{parentName:"tr",align:null},"JSON object"),(0,l.kt)("td",{parentName:"tr",align:null},"yes"),(0,l.kt)("td",{parentName:"tr",align:null},"a connection info JSON")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"b64info"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"yes"),(0,l.kt)("td",{parentName:"tr",align:null},"a binary connection info encoded in base64 format, will be decoded to raw bytes on Centrifugo before using in messages")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"data"),(0,l.kt)("td",{parentName:"tr",align:null},"JSON object"),(0,l.kt)("td",{parentName:"tr",align:null},"yes"),(0,l.kt)("td",{parentName:"tr",align:null},"a custom data to send to client in connect command response.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"b64data"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"yes"),(0,l.kt)("td",{parentName:"tr",align:null},"a custom data to send to client in connect command response for binary connections, will be decoded to raw bytes on Centrifugo side before sending to client")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"channels"),(0,l.kt)("td",{parentName:"tr",align:null},"array of strings"),(0,l.kt)("td",{parentName:"tr",align:null},"yes"),(0,l.kt)("td",{parentName:"tr",align:null},"allows to provide a list of server-side channels to subscribe connection to. See more details about ",(0,l.kt)("a",{parentName:"td",href:"/docs/server/server_subs"},"server-side subscriptions"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"subs"),(0,l.kt)("td",{parentName:"tr",align:null},"map of SubscribeOptions"),(0,l.kt)("td",{parentName:"tr",align:null},"yes"),(0,l.kt)("td",{parentName:"tr",align:null},"map of channels with options to to subscribe connection to. See more details about ",(0,l.kt)("a",{parentName:"td",href:"/docs/server/server_subs"},"server-side subscriptions"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"meta"),(0,l.kt)("td",{parentName:"tr",align:null},"JSON object"),(0,l.kt)("td",{parentName:"tr",align:null},"yes"),(0,l.kt)("td",{parentName:"tr",align:null},"a custom data to attach to connection (this ",(0,l.kt)("strong",{parentName:"td"},"won't be exposed to client side"),")")))),(0,l.kt)("h4",{id:"options"},"Options"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"proxy_connect_timeout")," (float, in seconds) config option controls timeout of HTTP POST request sent to app backend."),(0,l.kt)("h4",{id:"example"},"Example"),(0,l.kt)("p",null,"Here is the simplest example of connect handler in Tornado Python framework (note that in real system you need to authenticate user on your backend side, here we just return ",(0,l.kt)("inlineCode",{parentName:"p"},'"56"')," as user ID):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class CentrifugoConnectHandler(tornado.web.RequestHandler):\n\n    def check_xsrf_cookie(self):\n        pass\n\n    def post(self):\n        self.set_header('Content-Type', 'application/json; charset=\"utf-8\"')\n        data = json.dumps({\n            'result': {\n                'user': '56'\n            }\n        })\n        self.write(data)\n\n\ndef main():\n    options.parse_command_line()\n    app = tornado.web.Application([\n      (r'/centrifugo/connect', CentrifugoConnectHandler),\n    ])\n    app.listen(3000)\n    tornado.ioloop.IOLoop.instance().start()\n\n\nif __name__ == '__main__':\n    main()\n")),(0,l.kt)("p",null,"This example should help you to implement similar HTTP handler in any language/framework you are using on backend side."),(0,l.kt)("h3",{id:"refresh-proxy"},"Refresh proxy"),(0,l.kt)("p",null,"With the following options in configuration file:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  ...\n  "proxy_refresh_endpoint": "http://localhost:3000/centrifugo/refresh",\n  "proxy_refresh_timeout":  "1s"\n}\n')),(0,l.kt)("p",null,"\u2013 Centrifugo will call ",(0,l.kt)("inlineCode",{parentName:"p"},"proxy_refresh_endpoint")," when it's time to refresh connection. Centrifugo itself will ask your backend about connection validity instead of refresh workflow on client side."),(0,l.kt)("p",null,"Payload sent to app backend in refresh request (when connection is going to expire):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "client":"9336a229-2400-4ebc-8c50-0a643d22e8a0",\n  "transport":"websocket",\n  "protocol": "json",\n  "encoding":"json",\n  "user":"56"\n}\n')),(0,l.kt)("p",null,"Response expected:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{"result": {"expire_at": 1565436268}}\n')),(0,l.kt)("h4",{id:"refresh-request-fields"},"Refresh request fields"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Optional"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"client"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"no"),(0,l.kt)("td",{parentName:"tr",align:null},"unique client ID generated by Centrifugo for each incoming connection")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"transport"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"no"),(0,l.kt)("td",{parentName:"tr",align:null},"transport name (ex. ",(0,l.kt)("inlineCode",{parentName:"td"},"websocket")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"sockjs"),")")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"protocol"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"no"),(0,l.kt)("td",{parentName:"tr",align:null},"protocol type used by client (",(0,l.kt)("inlineCode",{parentName:"td"},"json")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"protobuf")," at moment)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"encoding"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"no"),(0,l.kt)("td",{parentName:"tr",align:null},"protocol encoding type used (",(0,l.kt)("inlineCode",{parentName:"td"},"json")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"binary")," at moment)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"user"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"no"),(0,l.kt)("td",{parentName:"tr",align:null},"a connection user ID obtained during authentication process")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"meta"),(0,l.kt)("td",{parentName:"tr",align:null},"JSON object"),(0,l.kt)("td",{parentName:"tr",align:null},"yes"),(0,l.kt)("td",{parentName:"tr",align:null},"a connection attached meta (off by default, enable with ",(0,l.kt)("inlineCode",{parentName:"td"},'"proxy_include_connection_meta": true'),")")))),(0,l.kt)("h4",{id:"refresh-result-fields"},"Refresh result fields"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Optional"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"expired"),(0,l.kt)("td",{parentName:"tr",align:null},"bool"),(0,l.kt)("td",{parentName:"tr",align:null},"yes"),(0,l.kt)("td",{parentName:"tr",align:null},"a flag to mark connection as expired - client will be diconnected")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"expire_at"),(0,l.kt)("td",{parentName:"tr",align:null},"integer"),(0,l.kt)("td",{parentName:"tr",align:null},"yes"),(0,l.kt)("td",{parentName:"tr",align:null},"a timestamp in the future when connection must be considered expired")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"info"),(0,l.kt)("td",{parentName:"tr",align:null},"JSON object"),(0,l.kt)("td",{parentName:"tr",align:null},"yes"),(0,l.kt)("td",{parentName:"tr",align:null},"a connection info JSON")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"b64info"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"yes"),(0,l.kt)("td",{parentName:"tr",align:null},"a binary connection info encoded in base64 format, will be decoded to raw bytes on Centrifugo before using in messages")))),(0,l.kt)("h4",{id:"options-1"},"Options"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"proxy_refresh_timeout")," (float, in seconds) config option controls timeout of HTTP POST request sent to app backend."),(0,l.kt)("h3",{id:"rpc-proxy"},"RPC proxy"),(0,l.kt)("p",null,"With the following option in configuration file:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  ...\n  "proxy_rpc_endpoint": "http://localhost:3000/centrifugo/connect",\n  "proxy_rpc_timeout":  "1s"\n}\n')),(0,l.kt)("p",null,"RPC calls over client connection will be proxied to ",(0,l.kt)("inlineCode",{parentName:"p"},"proxy_rpc_endpoint"),". This allows developer to utilize WebSocket (or SockJS) connection in bidirectional way."),(0,l.kt)("p",null,"Payload example sent to app backend in RPC request:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "client":"9336a229-2400-4ebc-8c50-0a643d22e8a0",\n  "transport":"websocket",\n  "protocol": "json",\n  "encoding":"json",\n  "user":"56",\n  "method": "getCurrentPrice",\n  "data":{"params": {"object_id": 12}}\n}\n')),(0,l.kt)("p",null,"Response expected:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{"result": {"data": {"answer": "2019"}}}\n')),(0,l.kt)("h4",{id:"rpc-request-fields"},"RPC request fields"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Optional"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"client"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"no"),(0,l.kt)("td",{parentName:"tr",align:null},"unique client ID generated by Centrifugo for each incoming connection")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"transport"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"no"),(0,l.kt)("td",{parentName:"tr",align:null},"transport name (ex. ",(0,l.kt)("inlineCode",{parentName:"td"},"websocket")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"sockjs"),")")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"protocol"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"no"),(0,l.kt)("td",{parentName:"tr",align:null},"protocol type used by client (",(0,l.kt)("inlineCode",{parentName:"td"},"json")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"protobuf")," at moment)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"encoding"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"no"),(0,l.kt)("td",{parentName:"tr",align:null},"protocol encoding type used (",(0,l.kt)("inlineCode",{parentName:"td"},"json")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"binary")," at moment)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"user"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"no"),(0,l.kt)("td",{parentName:"tr",align:null},"a connection user ID obtained during authentication process")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"method"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"yes"),(0,l.kt)("td",{parentName:"tr",align:null},"an RPC method string, if client does not use named RPC call then method will be omitted")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"data"),(0,l.kt)("td",{parentName:"tr",align:null},"JSON object"),(0,l.kt)("td",{parentName:"tr",align:null},"yes"),(0,l.kt)("td",{parentName:"tr",align:null},"RPC custom data sent by client")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"b64data"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"yes"),(0,l.kt)("td",{parentName:"tr",align:null},"will be set instead of ",(0,l.kt)("inlineCode",{parentName:"td"},"data")," field for binary proxy mode")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"meta"),(0,l.kt)("td",{parentName:"tr",align:null},"JSON object"),(0,l.kt)("td",{parentName:"tr",align:null},"yes"),(0,l.kt)("td",{parentName:"tr",align:null},"a connection attached meta (off by default, enable with ",(0,l.kt)("inlineCode",{parentName:"td"},'"proxy_include_connection_meta": true'),")")))),(0,l.kt)("h4",{id:"rpc-result-fields"},"RPC result fields"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Optional"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"data"),(0,l.kt)("td",{parentName:"tr",align:null},"JSON object"),(0,l.kt)("td",{parentName:"tr",align:null},"yes"),(0,l.kt)("td",{parentName:"tr",align:null},"RPC response - any valid JSON is supported")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"b64data"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"yes"),(0,l.kt)("td",{parentName:"tr",align:null},"can be set instead of ",(0,l.kt)("inlineCode",{parentName:"td"},"data")," for binary response encoded in base64 format")))),(0,l.kt)("h4",{id:"options-2"},"Options"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"proxy_rpc_timeout")," (float, in seconds) config option controls timeout of HTTP POST request sent to app backend."),(0,l.kt)("p",null,"See below on how to return a custom error."),(0,l.kt)("h3",{id:"subscribe-proxy"},"Subscribe proxy"),(0,l.kt)("p",null,"With the following option in configuration file:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  ...\n  "proxy_subscribe_endpoint": "http://localhost:3000/centrifugo/subscribe",\n  "proxy_subscribe_timeout":  "1s"\n}\n')),(0,l.kt)("p",null,"\u2013 subscribe requests sent over client connection will be proxied to ",(0,l.kt)("inlineCode",{parentName:"p"},"proxy_subscribe_endpoint"),". This allows you to check access of client to a channel."),(0,l.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},(0,l.kt)("strong",{parentName:"p"},"Subscribe proxy does not proxy ",(0,l.kt)("a",{parentName:"strong",href:"/docs/server/channels#private-channel-prefix"},"private")," and ",(0,l.kt)("a",{parentName:"strong",href:"/docs/server/channels#user-channel-boundary"},"user-limited")," channels at the moment"),". That's because those are already provide a level of security (user-limited channels check current user ID, private channels require subscription token). In some cases you may use subscribe proxy as a replacement for private channels actually: if you prefer to check permissions using proxy to backend mechanism \u2013 just stop using ",(0,l.kt)("inlineCode",{parentName:"p"},"$")," prefixes in channels, properly configure subscribe proxy and validate subscriptions upon proxy from Centrifugo to your backend (issued each time user tries to subscribe on a channel for which subscribe proxy enabled)."))),(0,l.kt)("p",null,"Unlike proxy types described above subscribe proxy must be enabled per channel namespace. This means that every namespace (including global one) has a boolean option ",(0,l.kt)("inlineCode",{parentName:"p"},"proxy_subscribe")," that enables subscribe proxy for channels in a namespace."),(0,l.kt)("p",null,"So to enable subscribe proxy for channels without namespace define ",(0,l.kt)("inlineCode",{parentName:"p"},"proxy_subscribe")," on a top configuration level:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  ...\n  "proxy_subscribe_endpoint": "http://localhost:3000/centrifugo/subscribe",\n  "proxy_subscribe_timeout":  "1s",\n  "proxy_subscribe": true\n}\n')),(0,l.kt)("p",null,"Or for channels in namespace ",(0,l.kt)("inlineCode",{parentName:"p"},"sun"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  ...\n  "proxy_subscribe_endpoint": "http://localhost:3000/centrifugo/subscribe",\n  "proxy_subscribe_timeout":  "1s",\n  "namespaces": [{\n    "name": "sun",\n    "proxy_subscribe": true\n  }]\n}\n')),(0,l.kt)("p",null,"Payload example sent to app backend in subscribe request:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "client":"9336a229-2400-4ebc-8c50-0a643d22e8a0",\n  "transport":"websocket",\n  "protocol": "json",\n  "encoding":"json",\n  "user":"56",\n  "channel": "chat:index"\n}\n')),(0,l.kt)("p",null,"Response expected:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{"result": {}}\n')),(0,l.kt)("h4",{id:"subscribe-request-fields"},"Subscribe request fields"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Optional"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"client"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"no"),(0,l.kt)("td",{parentName:"tr",align:null},"unique client ID generated by Centrifugo for each incoming connection")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"transport"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"no"),(0,l.kt)("td",{parentName:"tr",align:null},"transport name (ex. ",(0,l.kt)("inlineCode",{parentName:"td"},"websocket")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"sockjs"),")")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"protocol"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"no"),(0,l.kt)("td",{parentName:"tr",align:null},"protocol type used by client (",(0,l.kt)("inlineCode",{parentName:"td"},"json")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"protobuf")," at moment)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"encoding"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"no"),(0,l.kt)("td",{parentName:"tr",align:null},"protocol encoding type used (",(0,l.kt)("inlineCode",{parentName:"td"},"json")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"binary")," at moment)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"user"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"no"),(0,l.kt)("td",{parentName:"tr",align:null},"a connection user ID obtained during authentication process")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"channel"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"no"),(0,l.kt)("td",{parentName:"tr",align:null},"a string channel client wants to subscribe to")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"meta"),(0,l.kt)("td",{parentName:"tr",align:null},"JSON object"),(0,l.kt)("td",{parentName:"tr",align:null},"yes"),(0,l.kt)("td",{parentName:"tr",align:null},"a connection attached meta (off by default, enable with ",(0,l.kt)("inlineCode",{parentName:"td"},'"proxy_include_connection_meta": true'),")")))),(0,l.kt)("h4",{id:"subscribe-result-fields"},"Subscribe result fields"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Optional"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"info"),(0,l.kt)("td",{parentName:"tr",align:null},"JSON object"),(0,l.kt)("td",{parentName:"tr",align:null},"yes"),(0,l.kt)("td",{parentName:"tr",align:null},"a channel info JSON")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"b64info"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"yes"),(0,l.kt)("td",{parentName:"tr",align:null},"a binary connection channel info encoded in base64 format, will be decoded to raw bytes on Centrifugo before using")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"data"),(0,l.kt)("td",{parentName:"tr",align:null},"JSON object"),(0,l.kt)("td",{parentName:"tr",align:null},"yes"),(0,l.kt)("td",{parentName:"tr",align:null},"a custom data to send to client in subscribe command reply.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"b64data"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"yes"),(0,l.kt)("td",{parentName:"tr",align:null},"a custom data to send to client in subscribe command reply, will be decoded to raw bytes on Centrifugo side before sending to client")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"override"),(0,l.kt)("td",{parentName:"tr",align:null},"Override object"),(0,l.kt)("td",{parentName:"tr",align:null},"yes"),(0,l.kt)("td",{parentName:"tr",align:null},"Allows dynamically override some channel options defined in Centrifugo configuration on per-connection basis (see below available fields)")))),(0,l.kt)("h4",{id:"override-object"},"Override object"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Optional"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"presence"),(0,l.kt)("td",{parentName:"tr",align:null},"BoolValue"),(0,l.kt)("td",{parentName:"tr",align:null},"yes"),(0,l.kt)("td",{parentName:"tr",align:null},"Override presence")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"join_leave"),(0,l.kt)("td",{parentName:"tr",align:null},"BoolValue"),(0,l.kt)("td",{parentName:"tr",align:null},"yes"),(0,l.kt)("td",{parentName:"tr",align:null},"Override join_leave")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"position"),(0,l.kt)("td",{parentName:"tr",align:null},"BoolValue"),(0,l.kt)("td",{parentName:"tr",align:null},"yes"),(0,l.kt)("td",{parentName:"tr",align:null},"Override position")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"recover"),(0,l.kt)("td",{parentName:"tr",align:null},"BoolValue"),(0,l.kt)("td",{parentName:"tr",align:null},"yes"),(0,l.kt)("td",{parentName:"tr",align:null},"Override recover")))),(0,l.kt)("p",null,"BoolValue is an object like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "value": true/false\n}\n')),(0,l.kt)("p",null,"See below on how to return an error in case you don't want to allow subscribing."),(0,l.kt)("h4",{id:"options-3"},"Options"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"proxy_subscribe_timeout")," (float, in seconds) config option controls timeout of HTTP POST request sent to app backend."),(0,l.kt)("h3",{id:"publish-proxy"},"Publish proxy"),(0,l.kt)("p",null,"With the following option in configuration file:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  ...\n  "proxy_publish_endpoint": "http://localhost:3000/centrifugo/publish",\n  "proxy_publish_timeout":  "1s"\n}\n')),(0,l.kt)("p",null,"\u2013 publish calls sent by a client will be proxied to ",(0,l.kt)("inlineCode",{parentName:"p"},"proxy_publish_endpoint"),"."),(0,l.kt)("p",null,"This request happens BEFORE a message actually published to a channel, so your backend can validate whether client can publish data to a channel. An important thing here is that publication to channel can fail after your backend successfully validated publish request (for example publish to Redis by Centrifugo returned an error). In this case your backend won't know about error happened but this error will propagate to client side. "),(0,l.kt)("p",null,"Like subscribe proxy publish proxy must be enabled per channel namespace. This means that every namespace (including global one) has a boolean option ",(0,l.kt)("inlineCode",{parentName:"p"},"proxy_publish")," that enables publish proxy for channels in namespace. All other namespace options will be taken into account before making proxy request, so you also need to turn on ",(0,l.kt)("inlineCode",{parentName:"p"},"publish")," option too."),(0,l.kt)("p",null,"So to enable publish proxy for channels without namespace define ",(0,l.kt)("inlineCode",{parentName:"p"},"proxy_publish")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"publish")," on a top configuration level:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  ...\n  "proxy_publish_endpoint": "http://localhost:3000/centrifugo/publish",\n  "proxy_publish_timeout":  "1s",\n  "publish": true,\n  "proxy_publish": true\n}\n')),(0,l.kt)("p",null,"Or for channels in namespace ",(0,l.kt)("inlineCode",{parentName:"p"},"sun"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  ...\n  "proxy_publish_endpoint": "http://localhost:3000/centrifugo/publish",\n  "proxy_publish_timeout":  "1s",\n  "namespaces": [{\n    "name": "sun",\n    "publish": true,\n    "proxy_publish": true\n  }]\n}\n')),(0,l.kt)("p",null,"Keep in mind that this will only work if ",(0,l.kt)("inlineCode",{parentName:"p"},"publish")," channel option is on for a channel namespace (or for global top-level namespace)."),(0,l.kt)("p",null,"Payload example sent to app backend in publish request:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "client":"9336a229-2400-4ebc-8c50-0a643d22e8a0",\n  "transport":"websocket",\n  "protocol": "json",\n  "encoding":"json",\n  "user":"56",\n  "channel": "chat:index",\n  "data":{"input":"hello"}\n}\n')),(0,l.kt)("p",null,"Response example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{"result": {}}\n')),(0,l.kt)("h4",{id:"publish-request-fields"},"Publish request fields"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Optional"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"client"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"no"),(0,l.kt)("td",{parentName:"tr",align:null},"unique client ID generated by Centrifugo for each incoming connection")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"transport"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"no"),(0,l.kt)("td",{parentName:"tr",align:null},"transport name (ex. ",(0,l.kt)("inlineCode",{parentName:"td"},"websocket")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"sockjs"),")")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"protocol"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"no"),(0,l.kt)("td",{parentName:"tr",align:null},"protocol type used by client (",(0,l.kt)("inlineCode",{parentName:"td"},"json")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"protobuf")," at moment)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"encoding"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"no"),(0,l.kt)("td",{parentName:"tr",align:null},"protocol encoding type used (",(0,l.kt)("inlineCode",{parentName:"td"},"json")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"binary")," at moment)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"user"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"no"),(0,l.kt)("td",{parentName:"tr",align:null},"a connection user ID obtained during authentication process")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"channel"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"no"),(0,l.kt)("td",{parentName:"tr",align:null},"a string channel client wants to publish to")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"data"),(0,l.kt)("td",{parentName:"tr",align:null},"JSON object"),(0,l.kt)("td",{parentName:"tr",align:null},"yes"),(0,l.kt)("td",{parentName:"tr",align:null},"data sent by client")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"b64data"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"yes"),(0,l.kt)("td",{parentName:"tr",align:null},"will be set instead of ",(0,l.kt)("inlineCode",{parentName:"td"},"data")," field for binary proxy mode")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"meta"),(0,l.kt)("td",{parentName:"tr",align:null},"JSON object"),(0,l.kt)("td",{parentName:"tr",align:null},"yes"),(0,l.kt)("td",{parentName:"tr",align:null},"a connection attached meta (off by default, enable with ",(0,l.kt)("inlineCode",{parentName:"td"},'"proxy_include_connection_meta": true'),")")))),(0,l.kt)("h4",{id:"publish-result-fields"},"Publish result fields"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Optional"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"data"),(0,l.kt)("td",{parentName:"tr",align:null},"JSON object"),(0,l.kt)("td",{parentName:"tr",align:null},"yes"),(0,l.kt)("td",{parentName:"tr",align:null},"an optional JSON data to send into a channel ",(0,l.kt)("strong",{parentName:"td"},"instead")," of original data sent by a client")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"b64data"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"yes"),(0,l.kt)("td",{parentName:"tr",align:null},"a binary data encoded in base64 format, the meaning is the same as for data above, will be decoded to raw bytes on Centrifugo side before publishing")))),(0,l.kt)("p",null,"See below on how to return an error in case you don't want to allow publishing."),(0,l.kt)("h4",{id:"options-4"},"Options"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"proxy_publish_timeout")," (float, in seconds) config option controls timeout of HTTP POST request sent to app backend."),(0,l.kt)("h3",{id:"return-custom-error"},"Return custom error"),(0,l.kt)("p",null,"Application backend can return JSON object that contain an error to return it to client:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "error": {\n    "code": 1000,\n    "message": "custom error"\n  }\n}\n')),(0,l.kt)("p",null,"Application ",(0,l.kt)("strong",{parentName:"p"},"should use error codes >= 1000"),", error codes in range 0-999 are reserved by Centrifugo internal protocol. Error code field is ",(0,l.kt)("inlineCode",{parentName:"p"},"uint32")," internally."),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Returning custom error does not apply to response on refresh request as there is no sense in returning an error (will not reach client anyway). "))),(0,l.kt)("h3",{id:"return-custom-disconnect"},"Return custom disconnect"),(0,l.kt)("p",null,"Application backend can return JSON object that contain an custom disconnect object to disconnect client in custom way:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "disconnect": {\n    "code": 4000,\n    "reconnect": false,\n    "reason": "custom disconnect"\n  }\n}\n')),(0,l.kt)("p",null,"Application ",(0,l.kt)("strong",{parentName:"p"},"must use numbers in range 4000-4999 for custom disconnect codes"),". Code is ",(0,l.kt)("inlineCode",{parentName:"p"},"uint32")," internally. Numbers below 4000 are reserved by Centrifugo internal protocol. Keep in mind that ",(0,l.kt)("strong",{parentName:"p"},"due to WebSocket protocol limitations and Centrifugo internal protocol needs you need to keep disconnect reason string no longer than 32 symbols"),"."),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Returning custom disconnect does not apply to response on refresh request as there is no way to control disconnect at moment - client will always be disconnected with ",(0,l.kt)("inlineCode",{parentName:"p"},"expired")," disconnect reason."))),(0,l.kt)("h2",{id:"grpc-proxy"},"GRPC proxy"),(0,l.kt)("p",null,"Centrifugo can also proxy connection events to your backend over GRPC instead of HTTP. In this case Centrifugo acts as a GRPC client and your backend acts as a GRPC server."),(0,l.kt)("p",null,"GRPC service definitions can be found in Centrifugo repository (TODO)."),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"GRPC proxy inherit all the fields for HTTP proxy \u2013 so you can refer to field descriptions for HTTP above. Actually both proxy types in Centrifugo share the same Protobuf schema definitions."))),(0,l.kt)("p",null,"Every proxy call in this case is a unary GRPC call. Centrifugo puts client headers into GRPC metadata (since GRPC doesn't have headers concept)."),(0,l.kt)("p",null,"All you need to do to enable proxying over GRPC instead of HTTP is to change schema part in endpoint options to ",(0,l.kt)("inlineCode",{parentName:"p"},"grpc"),", for example for connect proxy:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="config.json"',title:'"config.json"'},'{\n  ...\n  "proxy_connect_endpoint": "grpc://localhost:12000",\n  "proxy_connect_timeout":  "1s"\n}\n')),(0,l.kt)("h2",{id:"header-proxy-rules"},"Header proxy rules"),(0,l.kt)("p",null,"Centrifugo not only supports HTTP-based client transports but also GRPC-based (for example GRPC unidirectional stream). Here is a table with rules used to proxy headers/metadata in various scenarios:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Client protocol type"),(0,l.kt)("th",{parentName:"tr",align:null},"Proxy type"),(0,l.kt)("th",{parentName:"tr",align:null},"Client headers"),(0,l.kt)("th",{parentName:"tr",align:null},"Client metadata"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"HTTP"),(0,l.kt)("td",{parentName:"tr",align:null},"HTTP"),(0,l.kt)("td",{parentName:"tr",align:null},"In proxy request headers"),(0,l.kt)("td",{parentName:"tr",align:null},"N/A")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"GRPC"),(0,l.kt)("td",{parentName:"tr",align:null},"GRPC"),(0,l.kt)("td",{parentName:"tr",align:null},"N/A"),(0,l.kt)("td",{parentName:"tr",align:null},"In proxy request metadata")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"HTTP"),(0,l.kt)("td",{parentName:"tr",align:null},"GRPC"),(0,l.kt)("td",{parentName:"tr",align:null},"In proxy request metadata"),(0,l.kt)("td",{parentName:"tr",align:null},"N/A")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"GRPC"),(0,l.kt)("td",{parentName:"tr",align:null},"HTTP"),(0,l.kt)("td",{parentName:"tr",align:null},"N/A"),(0,l.kt)("td",{parentName:"tr",align:null},"In proxy request headers")))))}c.isMDXComponent=!0}}]);