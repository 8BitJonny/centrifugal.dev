"use strict";(self.webpackChunkcentrifugal_dev=self.webpackChunkcentrifugal_dev||[]).push([[9054],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),f=u(n),d=o,m=f["".concat(l,".").concat(d)]||f[d]||p[d]||i;return n?r.createElement(m,a(a({ref:t},s),{},{components:n})):r.createElement(m,a({ref:t},s))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=f;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var u=2;u<i;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},9365:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return c},metadata:function(){return u},toc:function(){return p}});var r=n(3117),o=n(102),i=(n(7294),n(3905)),a=["components"],c={id:"client_sdk",title:"Client real-time SDKs"},l=void 0,u={unversionedId:"transports/client_sdk",id:"version-3/transports/client_sdk",title:"Client real-time SDKs",description:"The following SDKs allow connecting to Centrifugo from the application frontend:",source:"@site/versioned_docs/version-3/transports/client_sdk.md",sourceDirName:"transports",slug:"/transports/client_sdk",permalink:"/docs/transports/client_sdk",draft:!1,editUrl:"https://github.com/centrifugal/centrifugal.dev/edit/main/versioned_docs/version-3/transports/client_sdk.md",tags:[],version:"3",frontMatter:{id:"client_sdk",title:"Client real-time SDKs"},sidebar:"Transports",previous:{title:"Real-time transports",permalink:"/docs/transports/overview"},next:{title:"WebSocket",permalink:"/docs/transports/websocket"}},s={},p=[],f={toc:p};function d(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The following SDKs allow connecting to Centrifugo from the application frontend:"),(0,i.kt)("admonition",{title:"No need in clients for unidirectional approach",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Client libraries listed here speak Centrifugo bidirectional protocol (WebSocket). If you aim to use unidirectional approach you don't need client connectors \u2013 just use standard APIs. See the difference ",(0,i.kt)("a",{parentName:"p",href:"/docs/transports/overview"},"here"),".")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/centrifugal/centrifuge-js"},"centrifuge-js")," \u2013 for browser, NodeJS and React Native"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/centrifugal/centrifuge-go"},"centrifuge-go")," - for Go language"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/centrifugal/centrifuge-mobile"},"centrifuge-mobile")," - for iOS/Android with ",(0,i.kt)("inlineCode",{parentName:"li"},"centrifuge-go")," as basis and ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/golang/mobile"},"gomobile")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/centrifugal/centrifuge-dart"},"centrifuge-dart")," - for Dart and Flutter"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/centrifugal/centrifuge-swift"},"centrifuge-swift")," \u2013 for native iOS development"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/centrifugal/centrifuge-java"},"centrifuge-java")," \u2013 for native Android development and general Java")),(0,i.kt)("p",null,"See a description of ",(0,i.kt)("a",{parentName:"p",href:"/docs/transports/client_protocol"},"client protocol")," if you want to write a custom client bidirectional connector."))}d.isMDXComponent=!0}}]);