"use strict";(self.webpackChunkcentrifugal_dev=self.webpackChunkcentrifugal_dev||[]).push([[8238],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(n),f=o,m=d["".concat(c,".").concat(f)]||d[f]||s[f]||i;return n?r.createElement(m,a(a({ref:t},u),{},{components:n})):r.createElement(m,a({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var p=2;p<i;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7700:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return u},default:function(){return d}});var r=n(2122),o=n(9756),i=(n(7294),n(3905)),a=["components"],l={id:"uni_grpc",title:"Unidirectional GRPC",sidebar_label:"GRPC"},c=void 0,p={unversionedId:"transports/uni_grpc",id:"transports/uni_grpc",isDocsHomePage:!1,title:"Unidirectional GRPC",description:"It's possible to connect to GRPC unidirectional stream to consume real-time messages from Centrifugo. In this case you need to generate GRPC code for your language on client-side.",source:"@site/docs/transports/uni_grpc.md",sourceDirName:"transports",slug:"/transports/uni_grpc",permalink:"/docs/transports/uni_grpc",editUrl:"https://github.com/centrifugal/centrifugal.dev/edit/main/docs/transports/uni_grpc.md",version:"current",frontMatter:{id:"uni_grpc",title:"Unidirectional GRPC",sidebar_label:"GRPC"},sidebar:"Transports",previous:{title:"HTTP streaming",permalink:"/docs/transports/uni_http_stream"},next:{title:"Client protocol",permalink:"/docs/transports/client_protocol"}},u=[{value:"Supported data formats",id:"supported-data-formats",children:[]},{value:"Options",id:"options",children:[{value:"uni_grpc",id:"uni_grpc",children:[]},{value:"uni_grpc_port",id:"uni_grpc_port",children:[]},{value:"uni_grpc_address",id:"uni_grpc_address",children:[]}]},{value:"Example",id:"example",children:[]}],s={toc:u};function d(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"It's possible to connect to GRPC unidirectional stream to consume real-time messages from Centrifugo. In this case you need to generate GRPC code for your language on client-side."),(0,i.kt)("p",null,"Protobuf definitions can be found here: TODO."),(0,i.kt)("p",null,"See a Go based example that connects to a server: TODO."),(0,i.kt)("p",null,"GRPC server will start on port ",(0,i.kt)("inlineCode",{parentName:"p"},"11000")," (default)."),(0,i.kt)("h2",{id:"supported-data-formats"},"Supported data formats"),(0,i.kt)("p",null,"JSON and binary."),(0,i.kt)("h2",{id:"options"},"Options"),(0,i.kt)("h3",{id:"uni_grpc"},"uni_grpc"),(0,i.kt)("p",null,"Boolean, default: ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("p",null,"Enables unidirectional GRPC endpoint."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="config.json"',title:'"config.json"'},'{\n    ...\n    "uni_grpc": true\n}\n')),(0,i.kt)("h3",{id:"uni_grpc_port"},"uni_grpc_port"),(0,i.kt)("p",null,"String, default ",(0,i.kt)("inlineCode",{parentName:"p"},'"11000"'),"."),(0,i.kt)("p",null,"Port to listen on."),(0,i.kt)("h3",{id:"uni_grpc_address"},"uni_grpc_address"),(0,i.kt)("p",null,"String, default ",(0,i.kt)("inlineCode",{parentName:"p"},'""')," (listen on all interfaces)"),(0,i.kt)("p",null,"Address to bind uni GRPC to."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Coming soon."))}d.isMDXComponent=!0}}]);